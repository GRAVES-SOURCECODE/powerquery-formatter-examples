{"version":3,"sources":["webpack:///./src/pagecomponents/Api.tsx"],"names":["ApiPage","_React$Component","apply","this","arguments","prototype","render","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_components_Layout__WEBPACK_IMPORTED_MODULE_1__","header","url","type","title","description","react_icons_fa__WEBPACK_IMPORTED_MODULE_2__","style","position","top","href","dangerouslySetInnerHTML","__html","React","Component"],"mappings":"6KAKO,IAAMA,EAAb,SAAAC,WAAA,SAAAD,IAAA,OAAAC,EAAAC,MAAAC,KAAAC,YAAAD,KAAA,SAAAF,KAAAD,kFAAAK,UAEEC,OAAA,WAQE,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,OAPiB,CACzBC,IAAK,IACLC,KAAM,UACNC,MAAO,8CACPC,YAAa,iCAIXR,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQC,MAAO,CAACC,SAAU,WAAYC,IAAK,WAA/C,sBACAZ,EAAAC,EAAAC,cAAA,qGAC2FF,EAAAC,EAAAC,cAAA,iBAD3F,cAEEF,EAAAC,EAAAC,cAAA,KAAGW,KAAK,oDAAR,sDAFF,qBAGoBb,EAAAC,EAAAC,cAAA,6BAHpB,qCAIEF,EAAAC,EAAAC,cAAA,OAAKY,wBAAyB,CAACC,OAAM,kVAJvC,kCAUiCf,EAAAC,EAAAC,cAAA,KAAGW,KAAK,8DAAR,2BAAgGb,EAAAC,EAAAC,cAAA,WACjIF,EAAAC,EAAAC,cAAA,2CAEEF,EAAAC,EAAAC,cAAA,OAAKY,wBAAyB,CAACC,OAAM,m9FAuBrCf,EAAAC,EAAAC,cAAA,6GACiGF,EAAAC,EAAAC,cAAA,sBADjG,gDAEAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,qBAAa,IAAb,MAAqB,KACrBF,EAAAC,EAAAC,cAAA,oBAGAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,2BAtEdT,EAAA,CAA6BuB,IAAMC,WAiFpBxB","file":"component---src-pagecomponents-api-tsx-d5425e61006596e8182d.js","sourcesContent":["import React from \"react\";\nimport { Layout } from \"../components/Layout\";\nimport { IHeaderProps } from '../components/Header';\nimport { FaCogs } from \"react-icons/fa\";\n\nexport class ApiPage extends React.Component\n{\n  render()\n  {\n    let header: IHeaderProps = {\n      url: \"/\",\n      type: \"website\",\n      title: \"M Formatter | Beautify your PowerQuery code\",\n      description: \"Report a bug for M Formatter\"\n    };\n    return (\n      <Layout header={header}>\n        <h1><FaCogs style={{position: \"relative\", top: \".15em\"}} /> Api Documentation</h1>\n        <p>\n          The formatting service is hosted as an azure function. To use the api you need to send a <b>POST</b> request to \n          <a href=\"https://m-formatter.azurewebsites.net/api/format\"> https://m-formatter.azurewebsites.net/api/format </a> \n          with content type <b>application/json</b> and the following body structure:\n          <div dangerouslySetInnerHTML={{__html: `<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: rgb(255, 255, 255); color: rgb(0, 0, 0);\"><span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 255);\">type</span> RequestBody =\n{\n     code: <span class=\"hljs-built_in\" style=\"color: rgb(0, 0, 255);\">string</span>,\n     config: IConfig\n}</pre>`}}>\n          </div>\n          A usage example is provided in <a href=\"https://github.com/UliPlabst/powerquery-formatter-examples\">our example repository.</a><br/>\n        <p>\n          The config object is defined by\n          <div dangerouslySetInnerHTML={{__html: `<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: rgb(255, 255, 255); color: rgb(0, 0, 0);\"><span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 255);\">export</span> <span class=\"hljs-keyword\" style=\"color: rgb(0, 0, 255);\">interface</span> IConfig\n{\n    <span class=\"hljs-comment\" style=\"color: green;\">//String that is used for indentation, default = \"&amp;nbsp;&amp;nbsp;\"</span>\n    indentation?: <span class=\"hljs-built_in\" style=\"color: rgb(0, 0, 255);\">string</span>;\n    <span class=\"hljs-comment\" style=\"color: green;\">//Length of the indentation string (is used for determining when the max line width is reached)</span>\n    indentationLength?: <span class=\"hljs-built_in\" style=\"color: rgb(0, 0, 255);\">number</span>;\n    <span class=\"hljs-comment\" style=\"color: green;\">//String that is used to terminate a line, default = \"&lt;br/&gt;\"</span>\n    lineEnd?: <span class=\"hljs-built_in\" style=\"color: rgb(0, 0, 255);\">string</span>;\n    <span class=\"hljs-comment\" style=\"color: green;\">//String that is used as a whitespace, default = \"&amp;nbsp;\"</span>\n    ws?: <span class=\"hljs-built_in\" style=\"color: rgb(0, 0, 255);\">string</span>;\n    <span class=\"hljs-comment\" style=\"color: green;\">//Maximum line width, default = 100. The formatter forces expression to break into several lines if the maximum line width would be reached. Please not some expressions cannot be broken into multiple lines such as very long identifiers and therefore the maximum line width can be exceeded in these cases. As of now there is no warning to give you info about that.</span>\n    lineWidth?: <span class=\"hljs-built_in\" style=\"color: rgb(0, 0, 255);\">number</span>;\n    <span class=\"hljs-comment\" style=\"color: green;\">//Number of different bracket classes, default = 3. The formatter assigns bracket pairs the classes 'bracket' and 'bracket-{num}' where num = 1...{numBrackets}. You can then style your matching brackets with configurable depth.</span>\n    numBrackets?: <span class=\"hljs-built_in\" style=\"color: rgb(0, 0, 255);\">number</span>;\n    <span class=\"hljs-comment\" style=\"color: green;\">//All text (code) is escaped into html format, default = true.</span>\n    escapeHtmlText?: <span class=\"hljs-built_in\" style=\"color: rgb(0, 0, 255);\">boolean</span>;\n    <span class=\"hljs-comment\" style=\"color: green;\">//Align paired expressions by their equal sign, default = false.</span>\n    alignPairedExpressionsByEqual?: <span class=\"hljs-built_in\" style=\"color: rgb(0, 0, 255);\">boolean</span>;\n    <span class=\"hljs-comment\" style=\"color: green;\">//If null the formatter will put classes onto the resulting html but not styles (can be used for websites where you want to style the formatted html with css yourself). If non null the classes will be translated to inline styles on the html elements. See below for more information about the used classes.</span>\n    inlineCss?: <span class=\"hljs-built_in\" style=\"color: rgb(0, 0, 255);\">string</span>;\n}</pre>`}}>\n          </div>\n          </p>\n          <p>\n          The css classes assigned by the formatter that can be used to customize the style either via the <b>inlineCss</b> config option or via css on your webpage are \n          <ul>\n            <li>constant\n            <ul>\n              <li>keyword</li>\n              <li>identifier</li>\n              <li>operator</li>\n              <li>bracket</li>\n              <li>bracket-{'{'}num{'}'}</li>\n              <li>type</li>\n            </ul>\n              </li>\n              <li>literal\n              <ul>\n              <li>string</li>\n              <li>list</li>\n              <li>boolean</li>\n              <li>number</li>\n              <li>null</li>\n              <li>record</li>\n              <li>string</li>\n            </ul>\n            </li>\n          </ul>\n          </p>\n        </p>\n      </Layout>\n    );\n  }\n}\n\nexport default ApiPage;"],"sourceRoot":""}